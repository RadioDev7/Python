# Цикл For
# For повторно выполняет блок кода до тех пор, пока условие в операторе for не
# станет недействительным

# Пример
pets = ['cats', 'dogs', 'rabbits', 'hamsters']
for myPets in pets:
 print(myPets)

print("------------")
# Можно отобразить индекс элементов списка. Для этого
# используется функция enumerate():
for index, myPets in enumerate(pets):
 print(index, myPets)

print("------------")
# Чтобы просмотреть словарь дествуем таким же способом
age1 = {'Peter': 5, 'John':7}
for i in age1:
 print(i)

# Если нужно получить и ключ, и значение, сделать этоmможно следующим образом.
print("------------")
age2 = {'Peter': 5, 'John':9}
for i in age2:
 print("Name = %s, Age = %s" %(i, age2[i]))

# В качестве альтернативы можно использовать метод items(). 
# Это встроенный метод, который возвращает каждую пару ключ — значение 
# в виде кортежа (ключ,значение).
print("------------")
age3 = {'Peter': 5, 'John':7}
for i, j in age3.items():
 print("Name = %s, Age = %d" %(i, j))

# В следующем примере показано, как цикл проходит по строке:
print("------------")
message = 'Hello'
for i in message:
 print (i)

# ПЕРЕБОР ЧИСЛОВОЙ ПОСЛЕДОВАТЕЛЬНОСТИ
# Для перебора последовательности чисел удобно 
# воспользоваться встроенной функцией range().
# range() генерирует список чисел и имеет следующий синтаксис:
# range(начало, конец, шаг).
# Если аргумент начало не указан, то генерируемая серия будет начинаться с нуля.

# Примечание
# В Python числовые серии начинаются с нуля, если явно не указано обратное.
# Если при использовании функции range() начало последовательности не указано, 
# то генерируемые числа начинаются с нуля. Если шаг не указан, то функция 
# генерирует список последовательных чисел (т. е. шаг = 1). Конечное значение 
# задается обязательно. Впрочем, у функции range() есть одна странность: 
# конечное значение никогда не входит в генерируемый список.

# Например:
# range(5) генерирует список [0, 1, 2, 3, 4]
# range(3, 10) генерирует список [3, 4, 5, 6, 7, 8, 9]
# range(4, 10, 2) генерирует список [4, 6, 8] 

# Пример
print("------------")
for a in range(10):
 print (a)
