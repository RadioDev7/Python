# 7.2 - Определение собственных функций
# Можно определять собственные функции и повторно использовать их в программах. 
# Синтаксис функции выглядит так:
# def functionName(список параметров):
#     код операций, выполняемых функцией
#     return [выражение]
# слово def сообщает программе, что код с отступом, который начинается в 
# следующей строке и идет далее, является частью функции. Ключевое слово return 
# возвращает ответ из функции. Функция может содержать более одной команды 
# return. Тем не менее после выполнения команды return происходит выход из 
# функции. Если ваша функция не должна возвращать значение, команду 
# return можно опустить; также можно включить команду return или return None.

# Пример
def checkIfPrime (numberToCheck): # объявление функции с переменной numberToChec
    for x in range(2, numberToCheck):
        if (numberToCheck%x == 0):
            return False
    return True
answer = checkIfPrime(13)
print(answer)


# Эта функция использует один параметр с именем number-ToCheck. 
# Параметры — переменные, которые используются для хранения аргументов, 
# передаваемых функции. В строках 2 и 3 в цикле for параметр numberToCheck 
# делится на все числа от 2 до numberToCheck - 1, после чего программа 
# проверяет, равен ли остаток нулю. Если остаток равен нулю, то numberToCheck 
# не является простым числом. Строка 4 возвращает False, и функция 
# возвращает управление. Если к последней итерации цикла ни при одном делении 
# не будет получен нулевой остаток, функция достигает строки 5 и возвращает True. 
# После этого функция возвращает управление. Чтобы использовать эту функцию, 
# вводим вызов checkIfPrime(13) и присваиваем ее переменной
# Здесь число 13 передается как аргумент и сохраняется в параметре numberToCheck. 
# Затем цикл for проверяет, является ли число numberToCheck простым, и возвращает 
# True или False. Чтобы вывести ответ - print(answer). 
# Выводится результат True